{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "dialog",
  "type": "registry:ui",
  "title": "Dialog",
  "description": "A window overlaid on either the primary window or another dialog window, rendering the content underneath inert.",
  "files": [
    {
      "path": "registry/ui/dialog/dialog.go",
      "content": "package dialog\n\nimport (\n\t\"github.com/canpacis/pacis/components\"\n\t\"github.com/canpacis/pacis/html\"\n\t\"github.com/canpacis/pacis/lucide\"\n\t\"github.com/canpacis/pacis/x\"\n)\n\nfunc New(items ...html.Item) html.Node {\n\treturn html.Div(\n\t\tcomponents.ItemsOf(\n\t\t\titems,\n\t\t\tx.Data(\"dialog\"),\n\t\t\tx.Ref(\"dialogroot\"),\n\t\t)...,\n\t)\n}\n\nfunc Trigger(items ...html.Item) html.Node {\n\treturn html.Button(\n\t\tcomponents.ItemsOf(\n\t\t\titems,\n\t\t\tOpen,\n\t\t\tx.Bind(\"aria-expanded\", \"opened\"),\n\t\t\tx.Bind(\"data-state\", \"opened ? 'open' : 'closed'\"),\n\t\t\thtml.Type(\"button\"),\n\t\t\thtml.Aria(\"has-popup\", \"dialog\"),\n\t\t)...,\n\t)\n}\n\nfunc Overlay() html.Node {\n\treturn html.Div(\n\t\tx.Show(\"opened\"),\n\t\tClose,\n\t\tx.Bind(\"data-state\", \"opened ? 'open' : 'closed'\"),\n\t\thtml.Data(\"slot\", \"dialog-overlay\"),\n\t\thtml.Data(\"aria-hidden\", \"true\"),\n\t\thtml.Aria(\"hidden\", \"true\"),\n\t\thtml.Attr(\"x-transition:enter\", \"transition-opacity duration-150\"),\n\t\thtml.Attr(\"x-transition:enter-start\", \"opacity-0\"),\n\t\thtml.Attr(\"x-transition:enter-end\", \"opacity-100\"),\n\t\thtml.Attr(\"x-transition:leave\", \"transition-opacity duration-150 delay-100\"),\n\t\thtml.Attr(\"x-transition:leave-start\", \"opacity-100\"),\n\t\thtml.Attr(\"x-transition:leave-end\", \"opacity-0\"),\n\t\thtml.Class(\"fixed inset-0 z-50 bg-black/50\"),\n\t)\n}\n\nfunc Content(items ...html.Item) html.Node {\n\titems = components.ItemsOf(\n\t\titems,\n\t\tx.Show(\"opened\"),\n\t\tx.Bind(\"data-state\", \"opened ? 'open' : 'closed'\"),\n\t\thtml.Data(\"slot\", \"dialog-cotent\"),\n\t\thtml.Role(\"dialog\"),\n\t\thtml.Attr(\"x-trap.noscroll\", \"opened\"),\n\t\thtml.Attr(\"x-transition:enter\", \"transition-opacity duration-150 delay-100\"),\n\t\thtml.Attr(\"x-transition:enter-start\", \"opacity-0\"),\n\t\thtml.Attr(\"x-transition:enter-end\", \"opacity-100\"),\n\t\thtml.Attr(\"x-transition:leave\", \"transition-opacity duration-150\"),\n\t\thtml.Attr(\"x-transition:leave-start\", \"opacity-100\"),\n\t\thtml.Attr(\"x-transition:leave-end\", \"opacity-0\"),\n\t\thtml.Class(\"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg sm:rounded-lg\"),\n\t)\n\n\titems = append(items, html.Button(\n\t\tClose,\n\t\thtml.Tabindex(\"-1\"),\n\t\thtml.Type(\"button\"),\n\t\thtml.Data(\"slot\", \"dialog-close\"),\n\t\thtml.Class(\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\"),\n\n\t\tlucide.X(html.Class(\"h-4 w-4\")),\n\t\thtml.Span(html.Class(\"sr-only\"), html.Text(\"Close\")),\n\t))\n\n\treturn html.Template(\n\t\tx.Teleport(\"body\"),\n\n\t\thtml.Div(\n\t\t\tOverlay(),\n\t\t\thtml.Div(items...),\n\t\t),\n\t)\n}\n\nfunc Header(items ...html.Item) html.Node {\n\treturn html.Div(components.ItemsOf(items, html.Class(\"flex flex-col space-y-1.5 text-center sm:text-left\"))...)\n}\n\nfunc Footer(items ...html.Item) html.Node {\n\treturn html.Div(components.ItemsOf(items, html.Class(\"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\"))...)\n}\n\nfunc Title(items ...html.Item) html.Node {\n\treturn html.Div(components.ItemsOf(items, html.Data(\"slot\", \"dialog-title\"), html.Class(\"text-lg font-semibold leading-none tracking-tight\"))...)\n}\n\nfunc Description(items ...html.Item) html.Node {\n\treturn html.Div(components.ItemsOf(items, html.Data(\"slot\", \"dialog-description\"), html.Class(\"text-sm text-muted-foreground\"))...)\n}\n\nvar Open = OpenOn(\"click\")\nvar Close = CloseOn(\"click\")\n\nfunc OpenOn(event string) *html.Attribute {\n\treturn html.Attr(\"x-on:\"+event, \"open($refs.dialogroot)\")\n}\n\nfunc CloseOn(event string) *html.Attribute {\n\treturn html.Attr(\"x-on:\"+event, \"close($refs.dialogroot)\")\n}\n",
      "type": "registry:ui",
      "target": "src/components/ui/dialog/dialog.go"
    }
  ]
}