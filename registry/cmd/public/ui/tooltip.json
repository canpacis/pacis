{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tooltip",
  "type": "registry:ui",
  "title": "Tooltip",
  "description": "A popup that displays information related to an element when the element receives keyboard focus or the mouse hovers over it.",
  "files": [
    {
      "path": "registry/ui/tooltip/tooltip.go",
      "content": "package tooltip\n\nimport (\n\t\"fmt\"\n\t\"time\"\n\n\t\"github.com/canpacis/pacis/components\"\n\t\"github.com/canpacis/pacis/html\"\n\t\"github.com/canpacis/pacis/x\"\n)\n\nfunc New(delay time.Duration, items ...html.Item) html.Node {\n\treturn html.Div(\n\t\tcomponents.ItemsOf(\n\t\t\titems,\n\t\t\tx.Ref(\"tooltiproot\"),\n\t\t\tx.Data(fmt.Sprintf(\"tooltip(%d)\", delay.Milliseconds())),\n\n\t\t\thtml.Class(\"size-fit\"),\n\t\t)...,\n\t)\n}\n\nfunc Trigger(items ...html.Item) html.Node {\n\treturn html.Button(\n\t\tcomponents.ItemsOf(\n\t\t\titems,\n\n\t\t\tx.Bind(\"data-state\", \"opened ? 'open' : 'close'\"),\n\t\t\tx.Ref(\"trigger\"),\n\n\t\t\tOpenOn(\"mouseenter\"),\n\t\t\tCloseOn(\"mouseleave\"),\n\t\t)...,\n\t)\n}\n\ntype Align = components.Variant\n\nconst (\n\tBottom = Align(iota)\n\tBottomStart\n\tBottomEnd\n\tTop\n\tTopStart\n\tTopEnd\n\tLeft\n\tLeftStart\n\tLeftEnd\n\tRight\n\tRightStart\n\tRightEnd\n)\n\ntype Offset = components.Size\n\nvar align = components.NewVariantApplier(func(el *html.Element, v components.Variant) {\n\tvar ref = \"$refs.trigger\"\n\tvar offset = el.Get(\"size\").(components.Size)\n\n\tswitch v {\n\tcase Bottom:\n\t\tel.SetAttribute(fmt.Sprintf(\"x-anchor.bottom.offset.%d\", offset), ref)\n\tcase BottomStart:\n\t\tel.SetAttribute(fmt.Sprintf(\"x-anchor.bottom-start.offset.%d\", offset), ref)\n\tcase BottomEnd:\n\t\tel.SetAttribute(fmt.Sprintf(\"x-anchor.bottom-end.offset.%d\", offset), ref)\n\tcase Top:\n\t\tel.SetAttribute(fmt.Sprintf(\"x-anchor.top.offset.%d\", offset), ref)\n\tcase TopStart:\n\t\tel.SetAttribute(fmt.Sprintf(\"x-anchor.top-start.offset.%d\", offset), ref)\n\tcase TopEnd:\n\t\tel.SetAttribute(fmt.Sprintf(\"x-anchor.top-end.offset.%d\", offset), ref)\n\tcase Left:\n\t\tel.SetAttribute(fmt.Sprintf(\"x-anchor.left.offset.%d\", offset), ref)\n\tcase LeftStart:\n\t\tel.SetAttribute(fmt.Sprintf(\"x-anchor.left-start.offset.%d\", offset), ref)\n\tcase LeftEnd:\n\t\tel.SetAttribute(fmt.Sprintf(\"x-anchor.left-end.offset.%d\", offset), ref)\n\tcase Right:\n\t\tel.SetAttribute(fmt.Sprintf(\"x-anchor.right.offset.%d\", offset), ref)\n\tcase RightStart:\n\t\tel.SetAttribute(fmt.Sprintf(\"x-anchor.right-start.offset.%d\", offset), ref)\n\tcase RightEnd:\n\t\tel.SetAttribute(fmt.Sprintf(\"x-anchor.right-end.offset.%d\", offset), ref)\n\tdefault:\n\t\tpanic(fmt.Sprintf(\"invalid align variant: %d\", v))\n\t}\n})\n\nfunc Content(items ...html.Item) html.Node {\n\treturn html.Template(\n\t\tx.Teleport(\"body\"),\n\n\t\thtml.Span(\n\t\t\tcomponents.ItemsOf(\n\t\t\t\titems,\n\t\t\t\thtml.Attr(\"x-transition:enter\", \"transition-opacity\"),\n\t\t\t\thtml.Attr(\"x-transition:enter-start\", \"opacity-0\"),\n\t\t\t\thtml.Attr(\"x-transition:enter-end\", \"opacity-100\"),\n\t\t\t\thtml.Attr(\"x-transition:leave\", \"transition-opacity\"),\n\t\t\t\thtml.Attr(\"x-transition:leave-start\", \"opacity-100\"),\n\t\t\t\thtml.Attr(\"x-transition:leave-end\", \"opacity-0\"),\n\t\t\t\thtml.Class(\"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md\"),\n\t\t\t\tx.Show(\"opened\"),\n\t\t\t\tTop,\n\t\t\t\tOffset(6),\n\t\t\t\talign,\n\t\t\t)...,\n\t\t),\n\t)\n}\n\nfunc OpenOn(event string) *html.Attribute {\n\treturn html.Attr(\"x-on:\"+event, \"open($refs.tooltiproot)\")\n}\n\nfunc CloseOn(event string) *html.Attribute {\n\treturn html.Attr(\"x-on:\"+event, \"close($refs.tooltiproot)\")\n}\n",
      "type": "registry:ui",
      "target": "src/components/ui/tooltip/tooltip.go"
    }
  ]
}