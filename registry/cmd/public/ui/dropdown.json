{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "dropdown",
  "type": "registry:ui",
  "title": "Dropdown",
  "description": "Displays a menu to the user — such as a set of actions or functions — triggered by a button.",
  "files": [
    {
      "path": "registry/ui/dropdown/dropdown.go",
      "content": "package dropdown\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/canpacis/pacis/components\"\n\t\"github.com/canpacis/pacis/html\"\n\t\"github.com/canpacis/pacis/x\"\n)\n\nfunc New(items ...html.Item) html.Node {\n\treturn html.Span(\n\t\tcomponents.ItemsOf(\n\t\t\titems,\n\t\t\thtml.Data(\"slot\", \"dropdown-menu\"),\n\t\t\tx.On(\"keydown\", \"open('keyboard', $refs.dropdownroot)\", \"down\"),\n\t\t\tx.On(\"keydown\", \"open('keyboard', $refs.dropdownroot)\", \"up\"),\n\t\t\tx.Data(\"dropdown\"),\n\t\t\tx.Ref(\"dropdownroot\"),\n\t\t)...,\n\t)\n}\n\nfunc Trigger(items ...html.Item) html.Node {\n\treturn html.Button(components.ItemsOf(items, html.Data(\"slot\", \"dropdown-menu-trigger\"), x.Ref(\"trigger\"), Open)...)\n}\n\nfunc Group(items ...html.Item) html.Node {\n\treturn html.Div(components.ItemsOf(items, html.Data(\"slot\", \"dropdown-menu-group\"), html.Role(\"group\"))...)\n}\n\nfunc Label(items ...html.Item) html.Node {\n\treturn html.Div(components.ItemsOf(items, html.Data(\"slot\", \"dropdown-menu-label\"), html.Class(\"px-2 py-1.5 text-sm font-semibold\"))...)\n}\n\nfunc Separator(items ...html.Item) html.Node {\n\treturn html.Div(components.ItemsOf(items, html.Data(\"slot\", \"dropdown-menu-separator\"), html.Role(\"separator\"), html.Data(\"orientation\", \"horizontal\"), html.Class(\"-mx-1 my-1 h-px bg-muted\"))...)\n}\n\nfunc Shortcut(items ...html.Item) html.Node {\n\treturn html.Div(components.ItemsOf(items, html.Data(\"slot\", \"dropdown-menu-shortcut\"), html.Class(\"ml-auto text-xs tracking-widest opacity-60\"))...)\n}\n\ntype Align = components.Variant\n\nconst (\n\tBottom = Align(iota)\n\tBottomStart\n\tBottomEnd\n\tTop\n\tTopStart\n\tTopEnd\n\tLeft\n\tLeftStart\n\tLeftEnd\n\tRight\n\tRightStart\n\tRightEnd\n)\n\ntype Offset = components.Size\n\nvar align = components.NewVariantApplier(func(el *html.Element, v components.Variant) {\n\tvar ref = \"$refs.trigger\"\n\tvar offset = el.Get(\"size\").(components.Size)\n\tif el.Get(\"subtrigger\") != nil {\n\t\tref = \"$refs.subtrigger\"\n\t\toffset = 0\n\t}\n\n\tswitch v {\n\tcase Bottom:\n\t\tel.SetAttribute(fmt.Sprintf(\"x-anchor.bottom.offset.%d\", offset), ref)\n\tcase BottomStart:\n\t\tel.SetAttribute(fmt.Sprintf(\"x-anchor.bottom-start.offset.%d\", offset), ref)\n\tcase BottomEnd:\n\t\tel.SetAttribute(fmt.Sprintf(\"x-anchor.bottom-end.offset.%d\", offset), ref)\n\tcase Top:\n\t\tel.SetAttribute(fmt.Sprintf(\"x-anchor.top.offset.%d\", offset), ref)\n\tcase TopStart:\n\t\tel.SetAttribute(fmt.Sprintf(\"x-anchor.top-start.offset.%d\", offset), ref)\n\tcase TopEnd:\n\t\tel.SetAttribute(fmt.Sprintf(\"x-anchor.top-end.offset.%d\", offset), ref)\n\tcase Left:\n\t\tel.SetAttribute(fmt.Sprintf(\"x-anchor.left.offset.%d\", offset), ref)\n\tcase LeftStart:\n\t\tel.SetAttribute(fmt.Sprintf(\"x-anchor.left-start.offset.%d\", offset), ref)\n\tcase LeftEnd:\n\t\tel.SetAttribute(fmt.Sprintf(\"x-anchor.left-end.offset.%d\", offset), ref)\n\tcase Right:\n\t\tel.SetAttribute(fmt.Sprintf(\"x-anchor.right.offset.%d\", offset), ref)\n\tcase RightStart:\n\t\tel.SetAttribute(fmt.Sprintf(\"x-anchor.right-start.offset.%d\", offset), ref)\n\tcase RightEnd:\n\t\tel.SetAttribute(fmt.Sprintf(\"x-anchor.right-end.offset.%d\", offset), ref)\n\tdefault:\n\t\tpanic(fmt.Sprintf(\"invalid align variant: %d\", v))\n\t}\n})\n\nfunc Content(items ...html.Item) html.Node {\n\treturn html.Template(\n\t\tx.Teleport(\"body\"),\n\n\t\thtml.Div(\n\t\t\tcomponents.ItemsOf(\n\t\t\t\titems,\n\t\t\t\tx.Cloak,\n\t\t\t\tx.X(\"trap.noscroll.noautofocus\", \"mouse\"),\n\t\t\t\tx.X(\"trap.noscroll\", \"keyboard\"),\n\t\t\t\tx.Show(\"opened\"),\n\t\t\t\tx.Bind(\"data-state\", \"opened ? 'open' : 'closed'\"),\n\t\t\t\tx.On(\"keydown\", \"$focus.next()\", \"down\"),\n\t\t\t\tx.On(\"keydown\", \"$focus.previous()\", \"up\"),\n\t\t\t\tx.On(\"keyup\", \"close($refs.dropdownroot)\", \"escape\", x.Window),\n\t\t\t\tx.On(\"click\", \"close($refs.dropdownroot)\", x.Outside),\n\t\t\t\thtml.Data(\"slot\", \"dropdown-menu-content\"),\n\t\t\t\thtml.Class(\"z-50 min-w-[8rem] overflow-y-auto rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\"),\n\t\t\t\tBottom,\n\t\t\t\tOffset(6),\n\t\t\t\talign,\n\t\t\t)...,\n\t\t),\n\t)\n}\n\nfunc Item(items ...html.Item) html.Node {\n\treturn html.Div(\n\t\tcomponents.ItemsOf(\n\t\t\titems,\n\t\t\tx.On(\"mouseenter\", \"$focus.focus($el)\"),\n\t\t\tx.On(\"mouseleave\", \"$el.blur()\"),\n\t\t\tx.On(\"keydown\", \"$el.click()\", \"enter\"),\n\t\t\tx.On(\"keydown\", \"$el.click()\", \"space\"),\n\t\t\thtml.Role(\"menuitem\"),\n\t\t\thtml.Data(\"slot\", \"dropdown-menu-item\"),\n\t\t\thtml.Tabindex(\"0\"),\n\t\t\thtml.Class(\"focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\"),\n\t\t\tClose,\n\t\t)...,\n\t)\n}\n\nvar Open = html.Attr(\"x-on:click\", \"open('mouse', $refs.dropdownroot)\")\nvar Close = html.Attr(\"x-on:click\", \"close($refs.dropdownroot)\")\n\nfunc OpenOn(event string) *html.Attribute {\n\treturn html.Attr(\"x-on:\"+event, \"open('mouse', $refs.dropdownroot)\")\n}\n\nfunc CloseOn(event string) *html.Attribute {\n\treturn html.Attr(\"x-on:\"+event, \"close($refs.dropdownroot)\")\n}\n",
      "type": "registry:ui",
      "target": "src/components/ui/dropdown/dropdown.go"
    }
  ]
}