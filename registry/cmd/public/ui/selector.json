{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "selector",
  "type": "registry:ui",
  "title": "Selector",
  "description": "Displays a list of options for the user to pick fromâ€”triggered by a button.",
  "files": [
    {
      "path": "registry/ui/selector/selector.go",
      "content": "package selector\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/canpacis/pacis/components\"\n\t\"github.com/canpacis/pacis/html\"\n\t\"github.com/canpacis/pacis/lucide\"\n\t\"github.com/canpacis/pacis/x\"\n)\n\nfunc New(value string, items ...html.Item) html.Node {\n\treturn html.Div(\n\t\tcomponents.ItemsOf(\n\t\t\titems,\n\t\t\tx.Data(fmt.Sprintf(\"select('%s')\", value)),\n\t\t\tx.On(\"keydown\", \"open('keyboard', $refs.selectroot)\", \"down\"),\n\t\t\tx.On(\"keydown\", \"open('keyboard', $refs.selectroot)\", \"up\"),\n\t\t\tx.Ref(\"selectroot\"),\n\t\t\thtml.Class(\"relative\"),\n\t\t)...,\n\t)\n}\n\nfunc Trigger(items ...html.Item) html.Node {\n\titems = components.ItemsOf(\n\t\titems,\n\t\tOpen,\n\t\tx.Bind(\"aria-expanded\", \"opened\"),\n\t\tx.Bind(\"data-state\", \"opened ? 'open' : 'closed'\"),\n\t\tx.Ref(\"trigger\"),\n\t\thtml.Type(\"button\"),\n\t\thtml.Role(\"combobox\"),\n\t\thtml.Autocomplete(\"none\"),\n\t\thtml.Data(\"slot\", \"select-trigger\"),\n\t\thtml.Class(\"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\"),\n\t)\n\titems = append(items, html.Aria(\"hidden\", \"true\"), lucide.ChevronDown(html.Class(\"h-4 w-4 opacity-50\")))\n\n\treturn html.Button(items...)\n}\n\nfunc Value(placeholder string, items ...html.Item) html.Node {\n\treturn html.Span(\n\t\tcomponents.ItemsOf(\n\t\t\titems,\n\t\t\thtml.Data(\"slot\", \"select-value\"),\n\t\t\thtml.Class(\"pointer-events-none\"),\n\n\t\t\tx.Text(fmt.Sprintf(\"label($refs.selectroot, '%s')\", placeholder)),\n\t\t)...,\n\t)\n}\n\nfunc Group(items ...html.Item) html.Node {\n\treturn html.Div(\n\t\tcomponents.ItemsOf(\n\t\t\titems,\n\t\t\thtml.Data(\"slot\", \"select-group\"),\n\t\t\thtml.Role(\"group\"),\n\t\t)...,\n\t)\n}\n\nfunc Label(items ...html.Item) html.Node {\n\treturn html.Div(\n\t\tcomponents.ItemsOf(\n\t\t\titems,\n\t\t\thtml.Data(\"slot\", \"select-label\"),\n\t\t\thtml.Class(\"text-muted-foreground px-2 py-1.5 text-xs\"),\n\t\t)...,\n\t)\n}\n\nfunc Separator(items ...html.Item) html.Node {\n\treturn html.Div(\n\t\tcomponents.ItemsOf(\n\t\t\titems,\n\t\t\thtml.Aria(\"hidden\", \"true\"),\n\t\t\thtml.Data(\"slot\", \"select-separator\"),\n\t\t\thtml.Class(\"-mx-1 my-1 h-px bg-muted\"),\n\t\t)...,\n\t)\n}\n\nfunc Content(items ...html.Item) html.Node {\n\treturn html.Div(\n\t\tx.Cloak,\n\t\tx.Show(\"opened\"),\n\t\tx.X(\"trap.noautofocus\", \"mouse\"),\n\t\tx.X(\"trap\", \"keyboard\"),\n\t\tx.On(\"keydown\", \"$focus.next()\", \"down\"),\n\t\tx.On(\"keydown\", \"$focus.previous()\", \"up\"),\n\t\tx.On(\"keyup\", \"close($refs.selectroot)\", \"escape\", x.Window),\n\t\tx.On(\"click\", \"close($refs.selectroot)\", x.Outside),\n\t\tx.X(\"anchor.bottom.offset.6\", \"$refs.trigger\"),\n\t\tx.Bind(\"data-state\", \"opened ? 'open' : 'closed'\"),\n\t\thtml.Role(\"listbox\"),\n\t\thtml.Data(\"slot\", \"select-content\"),\n\t\thtml.Class(\"relative z-50 min-w-[8rem] w-full overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\"),\n\t\thtml.Div(\n\t\t\tcomponents.ItemsOf(\n\t\t\t\titems,\n\t\t\t\thtml.Class(\"p-1 h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1\"),\n\t\t\t)...,\n\t\t),\n\t)\n}\n\nfunc Item(items ...html.Item) html.Node {\n\titems = components.ItemsOf(\n\t\titems,\n\t\tSelect,\n\t\tx.Bind(\"aria-selected\", \"false\"),\n\t\tx.On(\"mouseenter\", \"$focus.focus($el)\"),\n\t\tx.On(\"mouseleave\", \"$el.blur()\"),\n\t\tx.On(\"keydown\", \"$el.click()\", \"enter\"),\n\t\tx.On(\"keydown\", \"$el.click()\", \"space\"),\n\t\thtml.Data(\"slot\", \"select-item\"),\n\t\thtml.Role(\"option\"),\n\t\thtml.Class(\"focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2\"),\n\t)\n\n\titems = append(items,\n\t\thtml.Span(\n\t\t\tx.Show(\"value === $el.parentElement.getAttribute('data-value')\"),\n\t\t\thtml.Aria(\"hidden\", \"true\"),\n\t\t\thtml.Class(\"absolute right-2 flex size-3.5 items-center justify-center\"),\n\n\t\t\tlucide.Check(html.Class(\"h-4 w-4\")),\n\t\t),\n\t)\n\treturn html.Div(items...)\n}\n\nvar Open = OpenOn(\"click\")\nvar Close = CloseOn(\"click\")\nvar Select = SelectOn(\"click\")\n\nfunc OpenOn(event string) *html.Attribute {\n\treturn html.Attr(\"x-on:\"+event, \"open('mouse', $refs.selectroot)\")\n}\n\nfunc CloseOn(event string) *html.Attribute {\n\treturn html.Attr(\"x-on:\"+event, \"close($refs.selectroot)\")\n}\n\nfunc SelectOn(event string) *html.Attribute {\n\treturn html.Attr(\"x-on:\"+event, \"select($el.getAttribute('data-value'), $refs.selectroot); $nextTick(); close($refs.selectroot)\")\n}\n",
      "type": "registry:ui",
      "target": "src/components/ui/selector/selector.go"
    }
  ]
}