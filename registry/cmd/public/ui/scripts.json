{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "scripts",
  "type": "registry:lib",
  "title": "Scripts",
  "description": "Script files for working with AlpineJS and async streams.",
  "dependencies": [
    "alpinejs",
    "@alpinejs/focus",
    "@alpinejs/anchor"
  ],
  "devDependencies": [
    "@types/alpinejs",
    "@types/alpinejs__focus",
    "@types/alpinejs__anchor"
  ],
  "files": [
    {
      "path": "registry/script/alpine.ts",
      "content": "import anchor from \"@alpinejs/anchor\";\nimport focus from \"@alpinejs/focus\";\nimport Alpine from \"alpinejs\";\nimport { Notyf, type NotyfNotification } from \"notyf\";\n\nAlpine.plugin(anchor);\nAlpine.plugin(focus);\n\nAlpine.data(\"data\", (id: string) => {\n  const raw = document.querySelector(`script[type=\"application/json\"]#${id}`)\n    ?.textContent ?? \"{}\";\n  return JSON.parse(raw);\n});\n\nAlpine.data(\"accordion\", (defaultValue: string = \"\") => ({\n  active: defaultValue,\n  select(value: string, root: HTMLElement | null) {\n    if (this.active === value) {\n      this.active = \"\";\n    } else {\n      this.active = value;\n    }\n    if (root) {\n      root.dispatchEvent(\n        new CustomEvent(\"changed\", { detail: { value: this.active } }),\n      );\n    }\n  },\n}));\n\nAlpine.data(\"dialog\", () => ({\n  opened: false,\n  open(root: HTMLElement | null) {\n    this.opened = true;\n    if (root) {\n      root.dispatchEvent(new CustomEvent(\"open\"));\n    }\n  },\n  close(root: HTMLElement | null) {\n    this.opened = false;\n    if (root) {\n      root.dispatchEvent(new CustomEvent(\"closed\"));\n    }\n  },\n}));\n\nAlpine.data(\"dropdown\", () => ({\n  keyboard: false,\n  mouse: false,\n  get opened(): boolean {\n    return this.keyboard || this.mouse;\n  },\n  open(w: \"mouse\" | \"keyboard\" = \"mouse\", root: HTMLElement | null) {\n    if (w === \"mouse\") {\n      this.mouse = true;\n    } else {\n      this.keyboard = true;\n    }\n    if (root) {\n      root.dispatchEvent(new CustomEvent(\"open\"));\n    }\n  },\n  close(root: HTMLElement | null) {\n    this.mouse = false;\n    this.keyboard = false;\n    if (root) {\n      root.dispatchEvent(new CustomEvent(\"closed\"));\n    }\n  },\n}));\n\nAlpine.data(\"select\", (defaultValue: string) => ({\n  value: defaultValue,\n  keyboard: false,\n  mouse: false,\n  get opened(): boolean {\n    return this.keyboard || this.mouse;\n  },\n  label(root: HTMLElement, placeholder: string): string {\n    if (this.value.length === 0) {\n      return placeholder;\n    }\n    const element = Array.from(root.querySelectorAll(\"[role='option']\")).find(\n      (option) => option.getAttribute(\"data-value\") === this.value,\n    );\n    return element?.textContent ?? placeholder;\n  },\n  select(value: string, root: HTMLElement | null) {\n    this.value = value;\n    if (root) {\n      root.dispatchEvent(new CustomEvent(\"changed\", { detail: { value } }));\n    }\n  },\n  open(w: \"mouse\" | \"keyboard\" = \"mouse\", root: HTMLElement | null) {\n    if (w === \"mouse\") {\n      this.mouse = true;\n    } else {\n      this.keyboard = true;\n    }\n    if (root) {\n      root.dispatchEvent(new CustomEvent(\"open\"));\n    }\n  },\n  close(root: HTMLElement | null) {\n    this.mouse = false;\n    this.keyboard = false;\n    if (root) {\n      root.dispatchEvent(new CustomEvent(\"closed\"));\n    }\n  },\n}));\n\nAlpine.data(\"sheet\", () => ({\n  opened: false,\n  open(root: HTMLElement | null) {\n    this.opened = true;\n    if (root) {\n      root.dispatchEvent(new CustomEvent(\"open\"));\n    }\n  },\n  close(root: HTMLElement | null) {\n    this.opened = false;\n    if (root) {\n      root.dispatchEvent(new CustomEvent(\"closed\"));\n    }\n  },\n}));\n\nAlpine.data(\"tabs\", (defaultValue: string) => ({\n  active: defaultValue,\n  select(value: string, root: HTMLElement | null = null) {\n    this.active = value;\n    if (root) {\n      root.dispatchEvent(new CustomEvent(\"changed\", { detail: { value } }));\n    }\n  },\n}));\n\nconst toast = new Notyf({ ripple: false });\n\nconst toastObserver = new MutationObserver((mutations) => {\n  for (const mutation of mutations) {\n    const target = mutation.target as HTMLElement;\n    if (target.classList.contains(\"notyf__toast--disappear\")) {\n      target.classList.remove(\"notyf__toast--disappear\");\n      target.classList.add(\"animate-out\");\n      target.classList.add(\"fade-out\");\n      target.addEventListener(\"animationend\", () => {\n        target.remove();\n      });\n    }\n  }\n});\n\nnew MutationObserver((mutations) => {\n  for (const mutation of mutations) {\n    for (const node of mutation.addedNodes) {\n      toastObserver.observe(node, { attributes: true });\n    }\n  }\n}).observe(document.body.querySelector(\".notyf\") as HTMLElement, {\n  attributes: false,\n  childList: true,\n  subtree: false,\n});\n\nAlpine.data(\"toast\", (message: string = \"\", duration: number = 2000) => ({\n  instance: null as unknown as NotyfNotification,\n  show() {\n    this.instance = toast.open({\n      message: message,\n      duration: duration,\n      className:\n        \"border rounded-md shadow-lg animate-in fade-in w-64 p-4 text-sm cursor-default\",\n    });\n  },\n}));\n\nAlpine.data(\"tooltip\", (delay: number = 0) => ({\n  opened: false,\n  timout: 0,\n  open(root: HTMLElement | null) {\n    this.timout = setTimeout(() => {\n      this.opened = true;\n    }, delay);\n\n    if (root) {\n      root.dispatchEvent(new CustomEvent(\"open\"));\n    }\n  },\n  close(root: HTMLElement | null) {\n    clearTimeout(this.timout);\n    this.opened = false;\n    if (root) {\n      root.dispatchEvent(new CustomEvent(\"closed\"));\n    }\n  },\n}));\n\nAlpine.start();\n",
      "type": "registry:lib",
      "target": "src/web/alpine.ts"
    }
  ]
}