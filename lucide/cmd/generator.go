package main

import (
	"encoding/xml"
	"flag"
	"fmt"
	"log"
	"os"
	"path"
	"slices"
	"strings"
	"text/template"
	"unicode"
)

type Options struct {
	PackageName string
	OutDir      string
	IconsDir    string
}

type Icon struct {
	Name    string
	Content string
}

type TemplateData struct {
	PackageName string
	HTMLPackage string
	Icons       []Icon
}

var icontempl = `// Code generated by pacis. DO NOT EDIT.
package {{.PackageName}}

import (
	"strconv"

	html "{{ .HTMLPackage }}"
)

func join(props []html.Item, rest ...html.Item) []html.Item {
	return append(rest, props...)
}

func Fill(fill string) *html.Attribute {
	return html.Attr("fill", fill)
}

func Stroke(fill string) *html.Attribute {
	return html.Attr("stroke", fill)
}

func StrokeWidth(n float64) *html.Attribute {
	return html.Attr("stroke-width", strconv.FormatFloat(float64(n), 'f', -1, 64))
}

func Icon(items ...html.Item) *html.Element {
	items = join(items,
		Fill("none"),
		Stroke("currentColor"),
		StrokeWidth(2),
		html.Width("24"),
		html.Height("24"),
		html.Attr("viewBox", "0 0 24 24"),
		html.Attr("stroke-linecap", "round"),
		html.Attr("stroke-linejoin", "round"),
	)
	return html.El("svg", items...)
}
`

var iconstempl = `// Code generated by pacis. DO NOT EDIT.
package {{.PackageName}}

import html "{{.HTMLPackage}}"

type r = html.RawUnsafe

{{ range .Icons }}
func {{.Name}}(items ...html.Item) html.Node {
	return Icon(join(items, r([]byte{ {{.Content}} }))...)
}
{{ end }}
`

func main() {
	var options Options

	flag.StringVar(&options.PackageName, "package", "icons", "Generated go package name")
	flag.StringVar(&options.OutDir, "out", "icons", "Output directory")

	flag.Parse()
	options.IconsDir = flag.Arg(0)

	if len(options.IconsDir) == 0 {
		log.Fatal("Provide an input path")
	}

	data := &TemplateData{
		PackageName: options.PackageName,
		HTMLPackage: "github.com/canpacis/pacis/html",
		Icons:       []Icon{},
	}

	entries, err := os.ReadDir(options.IconsDir)
	if err != nil {
		log.Fatal(err)
	}

	type svg struct {
		Content []byte `xml:",innerxml"`
	}

	for _, entry := range entries {
		name := entry.Name()
		ext := path.Ext(name)
		if ext != ".svg" {
			continue
		}

		var svg svg

		file, err := os.OpenFile(path.Join(options.IconsDir, name), os.O_RDONLY, 0o644)
		if err != nil {
			log.Fatal(err)
		}
		decoder := xml.NewDecoder(file)
		if err := decoder.Decode(&svg); err != nil {
			log.Fatal(err)
		}
		svg.Content = slices.DeleteFunc(svg.Content, func(b byte) bool {
			return b == 10
		})

		icon := Icon{Name: toPascalCase(strings.TrimSuffix(name, ext))}

		c := []string{}
		for _, b := range svg.Content {
			c = append(c, fmt.Sprintf("%d", b))
		}
		icon.Content = strings.TrimSpace(strings.Join(c, ","))

		data.Icons = append(data.Icons, icon)
	}

	if err := writeFile(icontempl, path.Join(options.OutDir, "icon.go"), data); err != nil {
		log.Fatal(err)
	}
	if err := writeFile(iconstempl, path.Join(options.OutDir, "icons.go"), data); err != nil {
		log.Fatal(err)
	}
}

func writeFile(templ, name string, data *TemplateData) error {
	os.Remove(name)
	file, err := os.OpenFile(name, os.O_CREATE|os.O_RDWR, 0o644)
	if err != nil {
		return err
	}
	defer file.Close()

	tmp, err := template.New(name).Parse(templ)
	if err != nil {
		return err
	}
	return tmp.Execute(file, data)
}

func toPascalCase(s string) string {
	words := strings.FieldsFunc(s, func(r rune) bool {
		return !unicode.IsLetter(r) && !unicode.IsDigit(r)
	})

	for i, word := range words {
		words[i] = strings.ToUpper(string(word[0])) + strings.ToLower(word[1:])
	}

	return strings.Join(words, "")
}
